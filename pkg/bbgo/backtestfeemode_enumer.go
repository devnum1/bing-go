// Code generated by "enumer -type=BackTestFeeMode -transform=snake -trimprefix BackTestFeeMode -yaml -json"; DO NOT EDIT.

package bbgo

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _BackTestFeeModeName = "quotenativetoken"

var _BackTestFeeModeIndex = [...]uint8{0, 5, 11, 16}

const _BackTestFeeModeLowerName = "quotenativetoken"

func (i BackTestFeeMode) String() string {
	if i < 0 || i >= BackTestFeeMode(len(_BackTestFeeModeIndex)-1) {
		return fmt.Sprintf("BackTestFeeMode(%d)", i)
	}
	return _BackTestFeeModeName[_BackTestFeeModeIndex[i]:_BackTestFeeModeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _BackTestFeeModeNoOp() {
	var x [1]struct{}
	_ = x[BackTestFeeModeQuote-(0)]
	_ = x[BackTestFeeModeNative-(1)]
	_ = x[BackTestFeeModeToken-(2)]
}

var _BackTestFeeModeValues = []BackTestFeeMode{BackTestFeeModeQuote, BackTestFeeModeNative, BackTestFeeModeToken}

var _BackTestFeeModeNameToValueMap = map[string]BackTestFeeMode{
	_BackTestFeeModeName[0:5]:        BackTestFeeModeQuote,
	_BackTestFeeModeLowerName[0:5]:   BackTestFeeModeQuote,
	_BackTestFeeModeName[5:11]:       BackTestFeeModeNative,
	_BackTestFeeModeLowerName[5:11]:  BackTestFeeModeNative,
	_BackTestFeeModeName[11:16]:      BackTestFeeModeToken,
	_BackTestFeeModeLowerName[11:16]: BackTestFeeModeToken,
}

var _BackTestFeeModeNames = []string{
	_BackTestFeeModeName[0:5],
	_BackTestFeeModeName[5:11],
	_BackTestFeeModeName[11:16],
}

// BackTestFeeModeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func BackTestFeeModeString(s string) (BackTestFeeMode, error) {
	if val, ok := _BackTestFeeModeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _BackTestFeeModeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to BackTestFeeMode values", s)
}

// BackTestFeeModeValues returns all values of the enum
func BackTestFeeModeValues() []BackTestFeeMode {
	return _BackTestFeeModeValues
}

// BackTestFeeModeStrings returns a slice of all String values of the enum
func BackTestFeeModeStrings() []string {
	strs := make([]string, len(_BackTestFeeModeNames))
	copy(strs, _BackTestFeeModeNames)
	return strs
}

// IsABackTestFeeMode returns "true" if the value is listed in the enum definition. "false" otherwise
func (i BackTestFeeMode) IsABackTestFeeMode() bool {
	for _, v := range _BackTestFeeModeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for BackTestFeeMode
func (i BackTestFeeMode) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for BackTestFeeMode
func (i *BackTestFeeMode) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("BackTestFeeMode should be a string, got %s", data)
	}

	var err error
	*i, err = BackTestFeeModeString(s)
	return err
}

// MarshalYAML implements a YAML Marshaler for BackTestFeeMode
func (i BackTestFeeMode) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for BackTestFeeMode
func (i *BackTestFeeMode) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = BackTestFeeModeString(s)
	return err
}
