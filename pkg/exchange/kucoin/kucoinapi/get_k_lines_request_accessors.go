// Code generated by "requestgen -type GetKLinesRequest"; DO NOT EDIT.

package kucoinapi

import (
	"encoding/json"
	"fmt"
	"net/url"
	"strconv"
	"time"
)

func (g *GetKLinesRequest) Symbol(symbol string) *GetKLinesRequest {
	g.symbol = symbol
	return g
}

func (g *GetKLinesRequest) Interval(interval string) *GetKLinesRequest {
	g.interval = interval
	return g
}

func (g *GetKLinesRequest) StartAt(startAt time.Time) *GetKLinesRequest {
	g.startAt = &startAt
	return g
}

func (g *GetKLinesRequest) EndAt(endAt time.Time) *GetKLinesRequest {
	g.endAt = &endAt
	return g
}

func (g *GetKLinesRequest) GetParameters() (map[string]interface{}, error) {
	var params = map[string]interface{}{}

	// check symbol field -> json key symbol
	symbol := g.symbol

	// assign parameter of symbol
	params["symbol"] = symbol

	// check interval field -> json key type
	interval := g.interval

	switch interval {
	case "1min", "3min", "5min", "15min", "30min", "1hour", "2hour", "4hour", "6hour", "8hour", "12hour", "1day", "1week":
		params["type"] = interval

	default:
		return params, fmt.Errorf("type value %v is invalid", interval)

	}

	// assign parameter of interval
	params["type"] = interval

	// check startAt field -> json key startAt
	if g.startAt != nil {
		startAt := *g.startAt

		// assign parameter of startAt
		// convert time.Time to seconds time stamp
		params["startAt"] = strconv.FormatInt(startAt.Unix(), 10)
	}

	// check endAt field -> json key endAt
	if g.endAt != nil {
		endAt := *g.endAt

		// assign parameter of endAt
		// convert time.Time to seconds time stamp
		params["endAt"] = strconv.FormatInt(endAt.Unix(), 10)
	}

	return params, nil
}

func (g *GetKLinesRequest) GetParametersQuery() (url.Values, error) {
	query := url.Values{}

	params, err := g.GetParameters()
	if err != nil {
		return query, err
	}

	for k, v := range params {
		query.Add(k, fmt.Sprintf("%v", v))
	}

	return query, nil
}

func (g *GetKLinesRequest) GetParametersJSON() ([]byte, error) {
	params, err := g.GetParameters()
	if err != nil {
		return nil, err
	}

	return json.Marshal(params)
}
