// Code generated by "requestgen -type ListOrdersRequest"; DO NOT EDIT.

package kucoinapi

import (
	"fmt"
	"net/url"
	"strconv"
	"time"
)

func (r *ListOrdersRequest) Status(status string) *ListOrdersRequest {
	r.status = &status
	return r
}

func (r *ListOrdersRequest) Symbol(symbol string) *ListOrdersRequest {
	r.symbol = &symbol
	return r
}

func (r *ListOrdersRequest) Side(side SideType) *ListOrdersRequest {
	r.side = &side
	return r
}

func (r *ListOrdersRequest) OrderType(orderType OrderType) *ListOrdersRequest {
	r.orderType = &orderType
	return r
}

func (r *ListOrdersRequest) TradeType(tradeType TradeType) *ListOrdersRequest {
	r.tradeType = &tradeType
	return r
}

func (r *ListOrdersRequest) StartAt(startAt time.Time) *ListOrdersRequest {
	r.startAt = &startAt
	return r
}

func (r *ListOrdersRequest) EndAt(endAt time.Time) *ListOrdersRequest {
	r.endAt = &endAt
	return r
}

func (r *ListOrdersRequest) getParameters() (map[string]interface{}, error) {
	var params = map[string]interface{}{}

	// check status field -> json key status
	if r.status != nil {
		status := *r.status

		switch status {
		case "active", "done":
			params["status"] = status

		default:
			return params, fmt.Errorf("status value %v is invalid", status)

		}

		params["status"] = status
	} else {
	}

	// check symbol field -> json key symbol
	if r.symbol != nil {
		symbol := *r.symbol

		params["symbol"] = symbol
	} else {
	}

	// check side field -> json key side
	if r.side != nil {
		side := *r.side

		switch side {
		case "buy", "sell":
			params["side"] = side

		default:
			return params, fmt.Errorf("side value %v is invalid", side)

		}

		params["side"] = side
	} else {
	}

	// check orderType field -> json key type
	if r.orderType != nil {
		orderType := *r.orderType

		params["type"] = orderType
	} else {
	}

	// check tradeType field -> json key tradeType
	if r.tradeType != nil {
		tradeType := *r.tradeType

		params["tradeType"] = tradeType
	} else {
	}

	// check startAt field -> json key startAt
	if r.startAt != nil {
		startAt := *r.startAt

		// convert time.Time to milliseconds time
		params["startAt"] = strconv.FormatInt(startAt.UnixNano()/int64(time.Millisecond), 10)
	} else {
	}

	// check endAt field -> json key endAt
	if r.endAt != nil {
		endAt := *r.endAt

		// convert time.Time to milliseconds time
		params["endAt"] = strconv.FormatInt(endAt.UnixNano()/int64(time.Millisecond), 10)
	} else {
	}
	return params, nil
}

func (r *ListOrdersRequest) getQuery() (url.Values, error) {
	query := url.Values{}

	params, err := r.getParameters()
	if err != nil {
		return query, err
	}

	for k, v := range params {
		query.Add(k, fmt.Sprintf("%v", v))
	}

	return query, nil
}
