// Code generated by "requestgen -type PlaceOrderRequest"; DO NOT EDIT.

package kucoinapi

import (
	"fmt"
	"github.com/google/uuid"
	"net/url"
)

func (r *PlaceOrderRequest) ClientOrderID(clientOrderID string) *PlaceOrderRequest {
	r.clientOrderID = &clientOrderID
	return r
}

func (r *PlaceOrderRequest) Symbol(symbol string) *PlaceOrderRequest {
	r.symbol = symbol
	return r
}

func (r *PlaceOrderRequest) Tag(tag string) *PlaceOrderRequest {
	r.tag = &tag
	return r
}

func (r *PlaceOrderRequest) Side(side SideType) *PlaceOrderRequest {
	r.side = side
	return r
}

func (r *PlaceOrderRequest) OrderType(orderType OrderType) *PlaceOrderRequest {
	r.orderType = orderType
	return r
}

func (r *PlaceOrderRequest) Size(size string) *PlaceOrderRequest {
	r.size = size
	return r
}

func (r *PlaceOrderRequest) Price(price string) *PlaceOrderRequest {
	r.price = &price
	return r
}

func (r *PlaceOrderRequest) TimeInForce(timeInForce TimeInForceType) *PlaceOrderRequest {
	r.timeInForce = &timeInForce
	return r
}

func (r *PlaceOrderRequest) getParameters() (map[string]interface{}, error) {
	var params = map[string]interface{}{}

	// check clientOrderID field -> json key clientOid
	if r.clientOrderID != nil {
		clientOrderID := *r.clientOrderID

		if len(clientOrderID) == 0 {
			return params, fmt.Errorf("clientOid is required, empty string given")
		}

		params["clientOid"] = clientOrderID
	} else {
		clientOrderID := uuid.New().String()

		params["clientOid"] = clientOrderID
	}

	// check symbol field -> json key symbol
	symbol := r.symbol

	if len(symbol) == 0 {
		return params, fmt.Errorf("symbol is required, empty string given")
	}

	params["symbol"] = symbol

	// check tag field -> json key tag
	if r.tag != nil {
		tag := *r.tag

		params["tag"] = tag
	} else {
	}

	// check side field -> json key side
	side := r.side

	params["side"] = side

	// check orderType field -> json key ordType
	orderType := r.orderType

	params["ordType"] = orderType

	// check size field -> json key size
	size := r.size

	if len(size) == 0 {
		return params, fmt.Errorf("size is required, empty string given")
	}

	params["size"] = size

	// check price field -> json key price
	if r.price != nil {
		price := *r.price

		params["price"] = price
	} else {
	}

	// check timeInForce field -> json key timeInForce
	if r.timeInForce != nil {
		timeInForce := *r.timeInForce

		if len(timeInForce) == 0 {
			return params, fmt.Errorf("timeInForce is required, empty string given")
		}

		params["timeInForce"] = timeInForce
	} else {
	}
	return params, nil
}

func (r *PlaceOrderRequest) getQuery() (url.Values, error) {
	query := url.Values{}

	params, err := r.getParameters()
	if err != nil {
		return query, err
	}

	for k, v := range params {
		query.Add(k, fmt.Sprintf("%v", v))
	}

	return query, nil
}
