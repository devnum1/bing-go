// Code generated by "requestgen -method GET -url v2/trades/my -type PrivateTradeRequest -responseType []Trade"; DO NOT EDIT.

package max

import (
	"context"
	"encoding/json"
	"fmt"
	"net/url"
	"reflect"
	"regexp"
	"strconv"
	"time"
)

func (p *PrivateTradeRequest) Market(market string) *PrivateTradeRequest {
	p.market = market
	return p
}

func (p *PrivateTradeRequest) Timestamp(timestamp time.Time) *PrivateTradeRequest {
	p.timestamp = &timestamp
	return p
}

func (p *PrivateTradeRequest) From(from int64) *PrivateTradeRequest {
	p.from = &from
	return p
}

func (p *PrivateTradeRequest) To(to int64) *PrivateTradeRequest {
	p.to = &to
	return p
}

func (p *PrivateTradeRequest) OrderBy(orderBy string) *PrivateTradeRequest {
	p.orderBy = &orderBy
	return p
}

func (p *PrivateTradeRequest) Pagination(pagination bool) *PrivateTradeRequest {
	p.pagination = &pagination
	return p
}

func (p *PrivateTradeRequest) Limit(limit int64) *PrivateTradeRequest {
	p.limit = &limit
	return p
}

func (p *PrivateTradeRequest) Offset(offset int64) *PrivateTradeRequest {
	p.offset = &offset
	return p
}

// GetQueryParameters builds and checks the query parameters and returns url.Values
func (p *PrivateTradeRequest) GetQueryParameters() (url.Values, error) {
	var params = map[string]interface{}{}

	query := url.Values{}
	for k, v := range params {
		query.Add(k, fmt.Sprintf("%v", v))
	}

	return query, nil
}

// GetParameters builds and checks the parameters and return the result in a map object
func (p *PrivateTradeRequest) GetParameters() (map[string]interface{}, error) {
	var params = map[string]interface{}{}
	// check market field -> json key market
	market := p.market

	// assign parameter of market
	params["market"] = market
	// check timestamp field -> json key timestamp
	if p.timestamp != nil {
		timestamp := *p.timestamp

		// assign parameter of timestamp
		// convert time.Time to seconds time stamp
		params["timestamp"] = strconv.FormatInt(timestamp.Unix(), 10)
	} else {
	}
	// check from field -> json key from
	if p.from != nil {
		from := *p.from

		// assign parameter of from
		params["from"] = from
	} else {
	}
	// check to field -> json key to
	if p.to != nil {
		to := *p.to

		// assign parameter of to
		params["to"] = to
	} else {
	}
	// check orderBy field -> json key order_by
	if p.orderBy != nil {
		orderBy := *p.orderBy

		// assign parameter of orderBy
		params["order_by"] = orderBy
	} else {
	}
	// check pagination field -> json key pagination
	if p.pagination != nil {
		pagination := *p.pagination

		// assign parameter of pagination
		params["pagination"] = pagination
	} else {
	}
	// check limit field -> json key limit
	if p.limit != nil {
		limit := *p.limit

		// assign parameter of limit
		params["limit"] = limit
	} else {
	}
	// check offset field -> json key offset
	if p.offset != nil {
		offset := *p.offset

		// assign parameter of offset
		params["offset"] = offset
	} else {
	}

	return params, nil
}

// GetParametersQuery converts the parameters from GetParameters into the url.Values format
func (p *PrivateTradeRequest) GetParametersQuery() (url.Values, error) {
	query := url.Values{}

	params, err := p.GetParameters()
	if err != nil {
		return query, err
	}

	for k, v := range params {
		if p.isVarSlice(v) {
			p.iterateSlice(v, func(it interface{}) {
				query.Add(k+"[]", fmt.Sprintf("%v", it))
			})
		} else {
			query.Add(k, fmt.Sprintf("%v", v))
		}
	}

	return query, nil
}

// GetParametersJSON converts the parameters from GetParameters into the JSON format
func (p *PrivateTradeRequest) GetParametersJSON() ([]byte, error) {
	params, err := p.GetParameters()
	if err != nil {
		return nil, err
	}

	return json.Marshal(params)
}

// GetSlugParameters builds and checks the slug parameters and return the result in a map object
func (p *PrivateTradeRequest) GetSlugParameters() (map[string]interface{}, error) {
	var params = map[string]interface{}{}

	return params, nil
}

func (p *PrivateTradeRequest) applySlugsToUrl(url string, slugs map[string]string) string {
	for k, v := range slugs {
		needleRE := regexp.MustCompile(":" + k + "\\b")
		url = needleRE.ReplaceAllString(url, v)
	}

	return url
}

func (p *PrivateTradeRequest) iterateSlice(slice interface{}, f func(it interface{})) {
	sliceValue := reflect.ValueOf(slice)
	for i := 0; i < sliceValue.Len(); i++ {
		it := sliceValue.Index(i).Interface()
		f(it)
	}
}

func (p *PrivateTradeRequest) isVarSlice(v interface{}) bool {
	rt := reflect.TypeOf(v)
	switch rt.Kind() {
	case reflect.Slice:
		return true
	}
	return false
}

func (p *PrivateTradeRequest) GetSlugsMap() (map[string]string, error) {
	slugs := map[string]string{}
	params, err := p.GetSlugParameters()
	if err != nil {
		return slugs, nil
	}

	for k, v := range params {
		slugs[k] = fmt.Sprintf("%v", v)
	}

	return slugs, nil
}

func (p *PrivateTradeRequest) Do(ctx context.Context) ([]Trade, error) {

	// empty params for GET operation
	var params interface{}
	query, err := p.GetParametersQuery()
	if err != nil {
		return nil, err
	}

	apiURL := "v2/trades/my"

	req, err := p.client.NewAuthenticatedRequest(ctx, "GET", apiURL, query, params)
	if err != nil {
		return nil, err
	}

	response, err := p.client.SendRequest(req)
	if err != nil {
		return nil, err
	}

	var apiResponse []Trade
	if err := response.DecodeJSON(&apiResponse); err != nil {
		return nil, err
	}
	return apiResponse, nil
}
