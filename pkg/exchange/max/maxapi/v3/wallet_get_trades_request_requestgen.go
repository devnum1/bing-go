// Code generated by "requestgen -method GET -url /api/v3/wallet/:walletType/trades -type WalletGetTradesRequest -responseType []Trade"; DO NOT EDIT.

package v3

import (
	"context"
	"encoding/json"
	"fmt"
	"github.com/c9s/bbgo/pkg/exchange/max/maxapi"
	"net/url"
	"reflect"
	"regexp"
	"strconv"
	"time"
)

func (w *WalletGetTradesRequest) Market(market string) *WalletGetTradesRequest {
	w.market = market
	return w
}

func (w *WalletGetTradesRequest) From(from uint64) *WalletGetTradesRequest {
	w.from = &from
	return w
}

func (w *WalletGetTradesRequest) StartTime(startTime time.Time) *WalletGetTradesRequest {
	w.startTime = &startTime
	return w
}

func (w *WalletGetTradesRequest) EndTime(endTime time.Time) *WalletGetTradesRequest {
	w.endTime = &endTime
	return w
}

func (w *WalletGetTradesRequest) Limit(limit uint64) *WalletGetTradesRequest {
	w.limit = &limit
	return w
}

func (w *WalletGetTradesRequest) WalletType(walletType max.WalletType) *WalletGetTradesRequest {
	w.walletType = walletType
	return w
}

// GetQueryParameters builds and checks the query parameters and returns url.Values
func (w *WalletGetTradesRequest) GetQueryParameters() (url.Values, error) {
	var params = map[string]interface{}{}

	query := url.Values{}
	for _k, _v := range params {
		query.Add(_k, fmt.Sprintf("%v", _v))
	}

	return query, nil
}

// GetParameters builds and checks the parameters and return the result in a map object
func (w *WalletGetTradesRequest) GetParameters() (map[string]interface{}, error) {
	var params = map[string]interface{}{}
	// check market field -> json key market
	market := w.market

	// TEMPLATE check-required
	if len(market) == 0 {
		return nil, fmt.Errorf("market is required, empty string given")
	}
	// END TEMPLATE check-required

	// assign parameter of market
	params["market"] = market
	// check from field -> json key from_id
	if w.from != nil {
		from := *w.from

		// assign parameter of from
		params["from_id"] = from
	} else {
	}
	// check startTime field -> json key start_time
	if w.startTime != nil {
		startTime := *w.startTime

		// assign parameter of startTime
		// convert time.Time to milliseconds time stamp
		params["start_time"] = strconv.FormatInt(startTime.UnixNano()/int64(time.Millisecond), 10)
	} else {
	}
	// check endTime field -> json key end_time
	if w.endTime != nil {
		endTime := *w.endTime

		// assign parameter of endTime
		// convert time.Time to milliseconds time stamp
		params["end_time"] = strconv.FormatInt(endTime.UnixNano()/int64(time.Millisecond), 10)
	} else {
	}
	// check limit field -> json key limit
	if w.limit != nil {
		limit := *w.limit

		// assign parameter of limit
		params["limit"] = limit
	} else {
	}

	return params, nil
}

// GetParametersQuery converts the parameters from GetParameters into the url.Values format
func (w *WalletGetTradesRequest) GetParametersQuery() (url.Values, error) {
	query := url.Values{}

	params, err := w.GetParameters()
	if err != nil {
		return query, err
	}

	for _k, _v := range params {
		if w.isVarSlice(_v) {
			w.iterateSlice(_v, func(it interface{}) {
				query.Add(_k+"[]", fmt.Sprintf("%v", it))
			})
		} else {
			query.Add(_k, fmt.Sprintf("%v", _v))
		}
	}

	return query, nil
}

// GetParametersJSON converts the parameters from GetParameters into the JSON format
func (w *WalletGetTradesRequest) GetParametersJSON() ([]byte, error) {
	params, err := w.GetParameters()
	if err != nil {
		return nil, err
	}

	return json.Marshal(params)
}

// GetSlugParameters builds and checks the slug parameters and return the result in a map object
func (w *WalletGetTradesRequest) GetSlugParameters() (map[string]interface{}, error) {
	var params = map[string]interface{}{}
	// check walletType field -> json key walletType
	walletType := w.walletType

	// TEMPLATE check-required
	if len(walletType) == 0 {
		return nil, fmt.Errorf("walletType is required, empty string given")
	}
	// END TEMPLATE check-required

	// assign parameter of walletType
	params["walletType"] = walletType

	return params, nil
}

func (w *WalletGetTradesRequest) applySlugsToUrl(url string, slugs map[string]string) string {
	for _k, _v := range slugs {
		needleRE := regexp.MustCompile(":" + _k + "\\b")
		url = needleRE.ReplaceAllString(url, _v)
	}

	return url
}

func (w *WalletGetTradesRequest) iterateSlice(slice interface{}, _f func(it interface{})) {
	sliceValue := reflect.ValueOf(slice)
	for _i := 0; _i < sliceValue.Len(); _i++ {
		it := sliceValue.Index(_i).Interface()
		_f(it)
	}
}

func (w *WalletGetTradesRequest) isVarSlice(_v interface{}) bool {
	rt := reflect.TypeOf(_v)
	switch rt.Kind() {
	case reflect.Slice:
		return true
	}
	return false
}

func (w *WalletGetTradesRequest) GetSlugsMap() (map[string]string, error) {
	slugs := map[string]string{}
	params, err := w.GetSlugParameters()
	if err != nil {
		return slugs, nil
	}

	for _k, _v := range params {
		slugs[_k] = fmt.Sprintf("%v", _v)
	}

	return slugs, nil
}

func (w *WalletGetTradesRequest) Do(ctx context.Context) ([]max.Trade, error) {

	// empty params for GET operation
	var params interface{}
	query, err := w.GetParametersQuery()
	if err != nil {
		return nil, err
	}

	apiURL := "/api/v3/wallet/:walletType/trades"
	slugs, err := w.GetSlugsMap()
	if err != nil {
		return nil, err
	}

	apiURL = w.applySlugsToUrl(apiURL, slugs)

	req, err := w.client.NewAuthenticatedRequest(ctx, "GET", apiURL, query, params)
	if err != nil {
		return nil, err
	}

	response, err := w.client.SendRequest(req)
	if err != nil {
		return nil, err
	}

	var apiResponse []max.Trade
	if err := response.DecodeJSON(&apiResponse); err != nil {
		return nil, err
	}
	return apiResponse, nil
}
