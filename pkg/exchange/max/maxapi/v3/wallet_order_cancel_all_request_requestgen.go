// Code generated by "requestgen -method DELETE -url /api/v3/wallet/:walletType/orders -type WalletOrderCancelAllRequest -responseType []Order"; DO NOT EDIT.

package v3

import (
	"context"
	"encoding/json"
	"fmt"
	"github.com/c9s/bbgo/pkg/exchange/max/maxapi"
	"net/url"
	"reflect"
	"regexp"
)

func (w *WalletOrderCancelAllRequest) Side(side string) *WalletOrderCancelAllRequest {
	w.side = &side
	return w
}

func (w *WalletOrderCancelAllRequest) Market(market string) *WalletOrderCancelAllRequest {
	w.market = &market
	return w
}

func (w *WalletOrderCancelAllRequest) GroupID(groupID uint32) *WalletOrderCancelAllRequest {
	w.groupID = &groupID
	return w
}

func (w *WalletOrderCancelAllRequest) WalletType(walletType WalletType) *WalletOrderCancelAllRequest {
	w.walletType = walletType
	return w
}

// GetQueryParameters builds and checks the query parameters and returns url.Values
func (w *WalletOrderCancelAllRequest) GetQueryParameters() (url.Values, error) {
	var params = map[string]interface{}{}

	query := url.Values{}
	for _k, _v := range params {
		query.Add(_k, fmt.Sprintf("%v", _v))
	}

	return query, nil
}

// GetParameters builds and checks the parameters and return the result in a map object
func (w *WalletOrderCancelAllRequest) GetParameters() (map[string]interface{}, error) {
	var params = map[string]interface{}{}
	// check side field -> json key side
	if w.side != nil {
		side := *w.side

		// assign parameter of side
		params["side"] = side
	} else {
	}
	// check market field -> json key market
	if w.market != nil {
		market := *w.market

		// assign parameter of market
		params["market"] = market
	} else {
	}
	// check groupID field -> json key groupID
	if w.groupID != nil {
		groupID := *w.groupID

		// assign parameter of groupID
		params["groupID"] = groupID
	} else {
	}

	return params, nil
}

// GetParametersQuery converts the parameters from GetParameters into the url.Values format
func (w *WalletOrderCancelAllRequest) GetParametersQuery() (url.Values, error) {
	query := url.Values{}

	params, err := w.GetParameters()
	if err != nil {
		return query, err
	}

	for _k, _v := range params {
		if w.isVarSlice(_v) {
			w.iterateSlice(_v, func(it interface{}) {
				query.Add(_k+"[]", fmt.Sprintf("%v", it))
			})
		} else {
			query.Add(_k, fmt.Sprintf("%v", _v))
		}
	}

	return query, nil
}

// GetParametersJSON converts the parameters from GetParameters into the JSON format
func (w *WalletOrderCancelAllRequest) GetParametersJSON() ([]byte, error) {
	params, err := w.GetParameters()
	if err != nil {
		return nil, err
	}

	return json.Marshal(params)
}

// GetSlugParameters builds and checks the slug parameters and return the result in a map object
func (w *WalletOrderCancelAllRequest) GetSlugParameters() (map[string]interface{}, error) {
	var params = map[string]interface{}{}
	// check walletType field -> json key walletType
	walletType := w.walletType

	// TEMPLATE check-required
	if len(walletType) == 0 {
		return nil, fmt.Errorf("walletType is required, empty string given")
	}
	// END TEMPLATE check-required

	// assign parameter of walletType
	params["walletType"] = walletType

	return params, nil
}

func (w *WalletOrderCancelAllRequest) applySlugsToUrl(url string, slugs map[string]string) string {
	for _k, _v := range slugs {
		needleRE := regexp.MustCompile(":" + _k + "\\b")
		url = needleRE.ReplaceAllString(url, _v)
	}

	return url
}

func (w *WalletOrderCancelAllRequest) iterateSlice(slice interface{}, _f func(it interface{})) {
	sliceValue := reflect.ValueOf(slice)
	for _i := 0; _i < sliceValue.Len(); _i++ {
		it := sliceValue.Index(_i).Interface()
		_f(it)
	}
}

func (w *WalletOrderCancelAllRequest) isVarSlice(_v interface{}) bool {
	rt := reflect.TypeOf(_v)
	switch rt.Kind() {
	case reflect.Slice:
		return true
	}
	return false
}

func (w *WalletOrderCancelAllRequest) GetSlugsMap() (map[string]string, error) {
	slugs := map[string]string{}
	params, err := w.GetSlugParameters()
	if err != nil {
		return slugs, nil
	}

	for _k, _v := range params {
		slugs[_k] = fmt.Sprintf("%v", _v)
	}

	return slugs, nil
}

func (w *WalletOrderCancelAllRequest) Do(ctx context.Context) ([]max.Order, error) {

	params, err := w.GetParameters()
	if err != nil {
		return nil, err
	}
	query := url.Values{}

	apiURL := "/api/v3/wallet/:walletType/orders"
	slugs, err := w.GetSlugsMap()
	if err != nil {
		return nil, err
	}

	apiURL = w.applySlugsToUrl(apiURL, slugs)

	req, err := w.client.NewAuthenticatedRequest(ctx, "DELETE", apiURL, query, params)
	if err != nil {
		return nil, err
	}

	response, err := w.client.SendRequest(req)
	if err != nil {
		return nil, err
	}

	var apiResponse []max.Order
	if err := response.DecodeJSON(&apiResponse); err != nil {
		return nil, err
	}
	return apiResponse, nil
}
