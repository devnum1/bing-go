// Code generated by "requestgen -type ListingsRequest -method GET -url /v1/cryptocurrency/listings/latest -responseType Response"; DO NOT EDIT.

package v1

import (
	"context"
	"encoding/json"
	"fmt"
	"net/url"
	"reflect"
	"regexp"
)

func (l *ListingsRequest) Start(start int) *ListingsRequest {
	l.start = start
	return l
}

func (l *ListingsRequest) Limit(limit int) *ListingsRequest {
	l.limit = limit
	return l
}

func (l *ListingsRequest) Sort(sort string) *ListingsRequest {
	l.sort = sort
	return l
}

func (l *ListingsRequest) SortDir(sortDir string) *ListingsRequest {
	l.sortDir = sortDir
	return l
}

func (l *ListingsRequest) CryptocurrencyType(cryptocurrencyType string) *ListingsRequest {
	l.cryptocurrencyType = cryptocurrencyType
	return l
}

func (l *ListingsRequest) Tag(tag string) *ListingsRequest {
	l.tag = tag
	return l
}

func (l *ListingsRequest) Aux(aux string) *ListingsRequest {
	l.aux = aux
	return l
}

func (l *ListingsRequest) EndpointType(endpointType EndpointType) *ListingsRequest {
	l.endpointType = endpointType
	return l
}

// GetQueryParameters builds and checks the query parameters and returns url.Values
func (l *ListingsRequest) GetQueryParameters() (url.Values, error) {
	var params = map[string]interface{}{}
	// check start field -> json key start
	start := l.start

	// assign parameter of start
	params["start"] = start
	// check limit field -> json key limit
	limit := l.limit

	// assign parameter of limit
	params["limit"] = limit
	// check sort field -> json key sort
	sort := l.sort

	// assign parameter of sort
	params["sort"] = sort
	// check sortDir field -> json key sort_dir
	sortDir := l.sortDir

	// assign parameter of sortDir
	params["sort_dir"] = sortDir
	// check cryptocurrencyType field -> json key cryptocurrency_type
	cryptocurrencyType := l.cryptocurrencyType

	// assign parameter of cryptocurrencyType
	params["cryptocurrency_type"] = cryptocurrencyType
	// check tag field -> json key tag
	tag := l.tag

	// assign parameter of tag
	params["tag"] = tag
	// check aux field -> json key aux
	aux := l.aux

	// assign parameter of aux
	params["aux"] = aux

	query := url.Values{}
	for _k, _v := range params {
		query.Add(_k, fmt.Sprintf("%v", _v))
	}

	return query, nil
}

// GetParameters builds and checks the parameters and return the result in a map object
func (l *ListingsRequest) GetParameters() (map[string]interface{}, error) {
	var params = map[string]interface{}{}

	return params, nil
}

// GetParametersQuery converts the parameters from GetParameters into the url.Values format
func (l *ListingsRequest) GetParametersQuery() (url.Values, error) {
	query := url.Values{}

	params, err := l.GetParameters()
	if err != nil {
		return query, err
	}

	for _k, _v := range params {
		if l.isVarSlice(_v) {
			l.iterateSlice(_v, func(it interface{}) {
				query.Add(_k+"[]", fmt.Sprintf("%v", it))
			})
		} else {
			query.Add(_k, fmt.Sprintf("%v", _v))
		}
	}

	return query, nil
}

// GetParametersJSON converts the parameters from GetParameters into the JSON format
func (l *ListingsRequest) GetParametersJSON() ([]byte, error) {
	params, err := l.GetParameters()
	if err != nil {
		return nil, err
	}

	return json.Marshal(params)
}

// GetSlugParameters builds and checks the slug parameters and return the result in a map object
func (l *ListingsRequest) GetSlugParameters() (map[string]interface{}, error) {
	var params = map[string]interface{}{}
	// check endpointType field -> json key endpointType
	endpointType := l.endpointType

	// assign parameter of endpointType
	params["endpointType"] = endpointType

	return params, nil
}

func (l *ListingsRequest) applySlugsToUrl(url string, slugs map[string]string) string {
	for _k, _v := range slugs {
		needleRE := regexp.MustCompile(":" + _k + "\\b")
		url = needleRE.ReplaceAllString(url, _v)
	}

	return url
}

func (l *ListingsRequest) iterateSlice(slice interface{}, _f func(it interface{})) {
	sliceValue := reflect.ValueOf(slice)
	for _i := 0; _i < sliceValue.Len(); _i++ {
		it := sliceValue.Index(_i).Interface()
		_f(it)
	}
}

func (l *ListingsRequest) isVarSlice(_v interface{}) bool {
	rt := reflect.TypeOf(_v)
	switch rt.Kind() {
	case reflect.Slice:
		return true
	}
	return false
}

func (l *ListingsRequest) GetSlugsMap() (map[string]string, error) {
	slugs := map[string]string{}
	params, err := l.GetSlugParameters()
	if err != nil {
		return slugs, nil
	}

	for _k, _v := range params {
		slugs[_k] = fmt.Sprintf("%v", _v)
	}

	return slugs, nil
}

func (l *ListingsRequest) Do(ctx context.Context) (*Response, error) {

	// no body params
	var params interface{}
	query, err := l.GetQueryParameters()
	if err != nil {
		return nil, err
	}

	apiURL := "/v1/cryptocurrency/listings/latest"
	slugs, err := l.GetSlugsMap()
	if err != nil {
		return nil, err
	}

	apiURL = l.applySlugsToUrl(apiURL, slugs)

	req, err := l.client.NewAuthenticatedRequest(ctx, "GET", apiURL, query, params)
	if err != nil {
		return nil, err
	}

	response, err := l.client.SendRequest(req)
	if err != nil {
		return nil, err
	}

	var apiResponse Response
	if err := response.DecodeJSON(&apiResponse); err != nil {
		return nil, err
	}
	return &apiResponse, nil
}
