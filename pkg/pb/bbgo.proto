syntax = "proto3";

package pb;

option go_package = "../pb";

service BBGO {
    // should support streaming
    rpc Subcribe(SubscribeRequest) returns (stream SubscribeResponse) {}

    // request-response
    rpc CreateOrder(CreateOrderRequest) returns (CreateOrderResponse) {}
    rpc CancelOrder(CancelOrderRequest) returns (CancelOrderResponse) {}
    rpc QueryOrder(QueryOrderRequest) returns (QueryOrderResponse) {}
    rpc QueryOrders(QueryOrdersRequest) returns (QueryOrdersResponse) {}
    rpc QueryTrades(QueryTradesRequest) returns (QueryTradesResponse) {}
}

message SubscribeRequest {
    repeated Subscription subscriptions = 1;
}

message Subscription {
    string exchange = 1;
    string channel = 2;  // book, trade, ticker
    string market = 3;
    int64 depth = 4;
}

message SubscribeResponse {
    repeated SuccessResponse success_responses = 1;
}

message SuccessResponse {
    string exchange = 1;
    string channel = 2;  // book, trade, ticker, user
    string event = 3;    // snapshot, update, order_snapshot, ...
    string market = 4;
    repeated PriceVolume asks = 5;
    repeated PriceVolume bids = 6;
    repeated Trade trades = 7;
    Ticker ticker = 8;
    repeated Order orders = 9;
    repeated Balance balances = 10;
    int64 timestamp = 11;
}

message PriceVolume {
    int64 price = 1;
    int64 volume = 2;
}

// https://maicoin.github.io/max-websocket-docs/#/private_channels?id=trade-response
// https://maicoin.github.io/max-websocket-docs/#/public_trade?id=success-response
message Trade {
    int64 id = 1;  // trade id
    double price = 2;
    double volume = 3;
    string market = 4;
    int64 created_at = 5;
    string side = 6;
    double fee = 7;
    string fee_currency = 8;
    bool maker = 9;
    string trend = 10;
}

// https://maicoin.github.io/max-websocket-docs/#/public_ticker?id=success-response
message Ticker {
    double open = 1;
    double high = 2;
    double low = 3;
    double close = 4;
    double volume = 5;
}

// https://maicoin.github.io/max-websocket-docs/#/private_channels?id=snapshot
message Order {
    int64 id = 1;
    string side = 2;
    string order_type = 3;  // limit, ...
    double price = 4;
    double stop_price = 5;
    double avg_price = 6;
    string state = 7;
    string market = 8;
    int64 created_at = 9;
    double volume = 10;
    double remaining_volume = 11;
    double executed_volume = 12;
    int64 trades_count = 13;
    int64 client_oid = 14;
    int64 group_id = 15;
}

// https://maicoin.github.io/max-websocket-docs/#/private_channels?id=account-response
message Balance {
    string currency = 1;
    double available = 2;
    double locked = 3;
}

message CreateOrderRequest {
    string exchange = 1;
    Order order = 2;
}

message CreateOrderResponse {
    string exchange = 1;
    Order order = 2;
}

message CancelOrderRequest {
    string exchange = 1;
    int64 id = 2;
    int64 client_oid = 3;
}

message CancelOrderResponse {
    string exchange = 1;
    Order order = 2;
    int64 status_code = 3;
}

message QueryOrderRequest {
    string exchange = 1;
    int64 id = 2;
    int64 client_oid = 3;
}

message QueryOrderResponse {
    string exchange = 1;
    Order order = 2;
    int64 status_code = 3;
}

// https://max.maicoin.com/documents/api_list/v2#!/private/getApiV2Orders
message QueryOrdersRequest {
    string exchange = 1;
    string market = 2;
    repeated string state = 3;
    string order_by = 4;
    int64 group_id = 5;
    bool pagination = 6;
    int64 page = 7;
    int64 limit = 8;
    int64 offset = 9;
}

message QueryOrdersResponse {
    string exchange = 1;
    repeated Order orders = 2;
    int64 status_code = 3;
}

message QueryTradesRequest {
    string exchange = 1;
    string market = 2;
    int64 timestamp = 3;
    int64 from = 4;
    int64 to = 5;
    string order_by = 6;
    bool pagination = 7;
    int64 page = 8;
    int64 limit = 9;
    int64 offset = 10;
}

message QueryTradesResponse {
    string exchange = 1;
    repeated Trade trades = 2;
    int64 status_code = 3;
}
