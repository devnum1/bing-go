// Code generated by "requestgen -method GET -type SupplyRequest -url /v1/metrics/supply/:metric -responseType Response"; DO NOT EDIT.

package glassnode

import (
	"context"
	"encoding/json"
	"fmt"
	"net/url"
	"regexp"
)

func (s *SupplyRequest) SetAsset(Asset string) *SupplyRequest {
	s.Asset = Asset
	return s
}

func (s *SupplyRequest) SetSince(Since int64) *SupplyRequest {
	s.Since = Since
	return s
}

func (s *SupplyRequest) SetUntil(Until int64) *SupplyRequest {
	s.Until = Until
	return s
}

func (s *SupplyRequest) SetInterval(Interval Interval) *SupplyRequest {
	s.Interval = Interval
	return s
}

func (s *SupplyRequest) SetFormat(Format Format) *SupplyRequest {
	s.Format = Format
	return s
}

func (s *SupplyRequest) SetTimestampFormat(TimestampFormat string) *SupplyRequest {
	s.TimestampFormat = TimestampFormat
	return s
}

func (s *SupplyRequest) SetMetric(Metric string) *SupplyRequest {
	s.Metric = Metric
	return s
}

// GetQueryParameters builds and checks the query parameters and returns url.Values
func (s *SupplyRequest) GetQueryParameters() (url.Values, error) {
	var params = map[string]interface{}{}
	// check Asset field -> json key a
	Asset := s.Asset

	// TEMPLATE check-required
	if len(Asset) == 0 {
		return nil, fmt.Errorf("a is required, empty string given")
	}
	// END TEMPLATE check-required

	// assign parameter of Asset
	params["a"] = Asset
	// check Since field -> json key s
	Since := s.Since

	// assign parameter of Since
	params["s"] = Since
	// check Until field -> json key u
	Until := s.Until

	// assign parameter of Until
	params["u"] = Until
	// check Interval field -> json key i
	Interval := s.Interval

	// assign parameter of Interval
	params["i"] = Interval
	// check Format field -> json key f
	Format := s.Format

	// assign parameter of Format
	params["f"] = Format
	// check TimestampFormat field -> json key timestamp_format
	TimestampFormat := s.TimestampFormat

	// assign parameter of TimestampFormat
	params["timestamp_format"] = TimestampFormat

	query := url.Values{}
	for k, v := range params {
		query.Add(k, fmt.Sprintf("%v", v))
	}

	return query, nil
}

// GetParameters builds and checks the parameters and return the result in a map object
func (s *SupplyRequest) GetParameters() (map[string]interface{}, error) {
	var params = map[string]interface{}{}

	return params, nil
}

// GetParametersQuery converts the parameters from GetParameters into the url.Values format
func (s *SupplyRequest) GetParametersQuery() (url.Values, error) {
	query := url.Values{}

	params, err := s.GetParameters()
	if err != nil {
		return query, err
	}

	for k, v := range params {
		query.Add(k, fmt.Sprintf("%v", v))
	}

	return query, nil
}

// GetParametersJSON converts the parameters from GetParameters into the JSON format
func (s *SupplyRequest) GetParametersJSON() ([]byte, error) {
	params, err := s.GetParameters()
	if err != nil {
		return nil, err
	}

	return json.Marshal(params)
}

// GetSlugParameters builds and checks the slug parameters and return the result in a map object
func (s *SupplyRequest) GetSlugParameters() (map[string]interface{}, error) {
	var params = map[string]interface{}{}
	// check Metric field -> json key metric
	Metric := s.Metric

	// assign parameter of Metric
	params["metric"] = Metric

	return params, nil
}

func (s *SupplyRequest) applySlugsToUrl(url string, slugs map[string]string) string {
	for k, v := range slugs {
		needleRE := regexp.MustCompile(":" + k + "\\b")
		url = needleRE.ReplaceAllString(url, v)
	}

	return url
}

func (s *SupplyRequest) GetSlugsMap() (map[string]string, error) {
	slugs := map[string]string{}
	params, err := s.GetSlugParameters()
	if err != nil {
		return slugs, nil
	}

	for k, v := range params {
		slugs[k] = fmt.Sprintf("%v", v)
	}

	return slugs, nil
}

func (s *SupplyRequest) Do(ctx context.Context) (Response, error) {

	// no body params
	var params interface{}
	query, err := s.GetQueryParameters()
	if err != nil {
		return nil, err
	}

	apiURL := "/v1/metrics/supply/:metric"
	slugs, err := s.GetSlugsMap()
	if err != nil {
		return nil, err
	}

	apiURL = s.applySlugsToUrl(apiURL, slugs)

	req, err := s.Client.NewAuthenticatedRequest(ctx, "GET", apiURL, query, params)
	if err != nil {
		return nil, err
	}

	response, err := s.Client.SendRequest(req)
	if err != nil {
		return nil, err
	}

	var apiResponse Response
	if err := response.DecodeJSON(&apiResponse); err != nil {
		return nil, err
	}
	return apiResponse, nil
}
