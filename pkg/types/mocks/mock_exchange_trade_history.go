// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/c9s/bbgo/pkg/types (interfaces: ExchangeTradeHistoryService)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	types "github.com/c9s/bbgo/pkg/types"
	gomock "github.com/golang/mock/gomock"
)

// MockExchangeTradeHistoryService is a mock of ExchangeTradeHistoryService interface.
type MockExchangeTradeHistoryService struct {
	ctrl     *gomock.Controller
	recorder *MockExchangeTradeHistoryServiceMockRecorder
}

// MockExchangeTradeHistoryServiceMockRecorder is the mock recorder for MockExchangeTradeHistoryService.
type MockExchangeTradeHistoryServiceMockRecorder struct {
	mock *MockExchangeTradeHistoryService
}

// NewMockExchangeTradeHistoryService creates a new mock instance.
func NewMockExchangeTradeHistoryService(ctrl *gomock.Controller) *MockExchangeTradeHistoryService {
	mock := &MockExchangeTradeHistoryService{ctrl: ctrl}
	mock.recorder = &MockExchangeTradeHistoryServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExchangeTradeHistoryService) EXPECT() *MockExchangeTradeHistoryServiceMockRecorder {
	return m.recorder
}

// QueryClosedOrders mocks base method.
func (m *MockExchangeTradeHistoryService) QueryClosedOrders(arg0 context.Context, arg1 string, arg2, arg3 time.Time, arg4 uint64) ([]types.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryClosedOrders", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]types.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryClosedOrders indicates an expected call of QueryClosedOrders.
func (mr *MockExchangeTradeHistoryServiceMockRecorder) QueryClosedOrders(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryClosedOrders", reflect.TypeOf((*MockExchangeTradeHistoryService)(nil).QueryClosedOrders), arg0, arg1, arg2, arg3, arg4)
}

// QueryTrades mocks base method.
func (m *MockExchangeTradeHistoryService) QueryTrades(arg0 context.Context, arg1 string, arg2 *types.TradeQueryOptions) ([]types.Trade, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryTrades", arg0, arg1, arg2)
	ret0, _ := ret[0].([]types.Trade)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryTrades indicates an expected call of QueryTrades.
func (mr *MockExchangeTradeHistoryServiceMockRecorder) QueryTrades(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryTrades", reflect.TypeOf((*MockExchangeTradeHistoryService)(nil).QueryTrades), arg0, arg1, arg2)
}
